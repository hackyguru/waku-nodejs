import type { Libp2p } from "@libp2p/interface";
import type { Peer, Stream } from "@libp2p/interface";
import type { IBaseProtocolCore, Libp2pComponents, PubsubTopic } from "@waku/interfaces";
import { Logger } from "@waku/utils";
import { StreamManager } from "./stream_manager/index.js";
/**
 * A class with predefined helpers, to be used as a base to implement Waku
 * Protocols.
 */
export declare class BaseProtocol implements IBaseProtocolCore {
    multicodec: string;
    protected components: Libp2pComponents;
    private log;
    readonly pubsubTopics: PubsubTopic[];
    readonly addLibp2pEventListener: Libp2p["addEventListener"];
    readonly removeLibp2pEventListener: Libp2p["removeEventListener"];
    protected streamManager: StreamManager;
    protected constructor(multicodec: string, components: Libp2pComponents, log: Logger, pubsubTopics: PubsubTopic[]);
    protected getStream(peer: Peer): Promise<Stream>;
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * the class protocol. Waku may or may not be currently connected to these
     * peers.
     */
    allPeers(): Promise<Peer[]>;
    connectedPeers(): Promise<Peer[]>;
    /**
     * Retrieves a list of connected peers that support the protocol. The list is sorted by latency.
     *
     * @param numPeers - The total number of peers to retrieve. If 0, all peers are returned.
     * @param maxBootstrapPeers - The maximum number of bootstrap peers to retrieve.
     * @returns A list of peers that support the protocol sorted by latency. By default, returns all peers available, including bootstrap.
     */
    getPeers({ numPeers, maxBootstrapPeers }?: {
        numPeers: number;
        maxBootstrapPeers: number;
    }): Promise<Peer[]>;
}

import type { PeerId } from "@libp2p/interface";
import { TypedEventEmitter } from "@libp2p/interface";
import { ConnectionManagerOptions, IConnectionManager, IConnectionStateEvents, IPeersByDiscoveryEvents, IRelay, KeepAliveOptions, PeersByDiscoveryResult, PubsubTopic } from "@waku/interfaces";
import { Libp2p } from "@waku/interfaces";
export declare const DEFAULT_MAX_BOOTSTRAP_PEERS_ALLOWED = 1;
export declare const DEFAULT_MAX_DIAL_ATTEMPTS_FOR_PEER = 3;
export declare const DEFAULT_MAX_PARALLEL_DIALS = 3;
export declare class ConnectionManager extends TypedEventEmitter<IPeersByDiscoveryEvents & IConnectionStateEvents> implements IConnectionManager {
    readonly configuredPubsubTopics: PubsubTopic[];
    private static instances;
    private keepAliveManager;
    private options;
    private libp2p;
    private dialAttemptsForPeer;
    private dialErrorsForPeer;
    private currentActiveParallelDialCount;
    private pendingPeerDialQueue;
    private isP2PNetworkConnected;
    isConnected(): boolean;
    static create(peerId: string, libp2p: Libp2p, keepAliveOptions: KeepAliveOptions, pubsubTopics: PubsubTopic[], relay?: IRelay, options?: ConnectionManagerOptions): ConnectionManager;
    stop(): void;
    dropConnection(peerId: PeerId): Promise<void>;
    getPeersByDiscovery(): Promise<PeersByDiscoveryResult>;
    private constructor();
    private dialPeerStorePeers;
    private startEventListeners;
    private dialPeer;
    private attemptDnsDiscovery;
    private processDialQueue;
    private startPeerDiscoveryListener;
    private startPeerConnectionListener;
    private startPeerDisconnectionListener;
    attemptDial(peerId: PeerId): Promise<void>;
    private onEventHandlers;
    /**
     * Checks if the peer should be dialed based on the following conditions:
     * 1. If the peer is already connected, don't dial
     * 2. If the peer is not part of any of the configured pubsub topics, don't dial
     * 3. If the peer is not dialable based on bootstrap status, don't dial
     * 4. If the peer is already has an active dial attempt, or has been dialed before, don't dial it
     * @returns true if the peer should be dialed, false otherwise
     */
    private shouldDialPeer;
    /**
     * Checks if the peer is dialable based on the following conditions:
     * 1. If the peer is a bootstrap peer, it is only dialable if the number of current bootstrap connections is less than the max allowed.
     * 2. If the peer is not a bootstrap peer
     */
    private isPeerDialableBasedOnBootstrapStatus;
    private dispatchDiscoveryEvent;
    /**
     * Fetches the tag names for a given peer
     */
    private getTagNamesForPeer;
    private isPeerTopicConfigured;
    private getPeerShardInfo;
    private startNetworkStatusListener;
    private stopNetworkStatusListener;
    private setP2PNetworkConnected;
    private setP2PNetworkDisconnected;
    private dispatchWakuConnectionEvent;
}

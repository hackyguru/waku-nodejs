import { proto_filter_v2 as proto, WakuMessage } from "@waku/proto";
/**
 * FilterPushRPC represents a message conforming to the Waku FilterPush protocol.
 * Protocol documentation: https://rfc.vac.dev/spec/12/
 */
export declare class FilterPushRpc {
    proto: proto.MessagePush;
    constructor(proto: proto.MessagePush);
    static decode(bytes: Uint8Array): FilterPushRpc;
    encode(): Uint8Array;
    get wakuMessage(): WakuMessage | undefined;
    /**
     * Get the pubsub topic from the FilterPushRpc object.
     * @returns string
     */
    get pubsubTopic(): string | undefined;
}
export declare class FilterSubscribeRpc {
    proto: proto.FilterSubscribeRequest;
    constructor(proto: proto.FilterSubscribeRequest);
    static createSubscribeRequest(pubsubTopic: string, contentTopics: string[]): FilterSubscribeRpc;
    static createUnsubscribeRequest(pubsubTopic: string, contentTopics: string[]): FilterSubscribeRpc;
    static createUnsubscribeAllRequest(pubsubTopic: string): FilterSubscribeRpc;
    static createSubscriberPingRequest(): FilterSubscribeRpc;
    static decode(bytes: Uint8Array): FilterSubscribeRpc;
    encode(): Uint8Array;
    get filterSubscribeType(): proto.FilterSubscribeRequest.FilterSubscribeType;
    get requestId(): string;
    get pubsubTopic(): string | undefined;
    get contentTopics(): string[];
}
export declare class FilterSubscribeResponse {
    proto: proto.FilterSubscribeResponse;
    constructor(proto: proto.FilterSubscribeResponse);
    static decode(bytes: Uint8Array): FilterSubscribeResponse;
    encode(): Uint8Array;
    get statusCode(): number;
    get statusDesc(): string | undefined;
    get requestId(): string;
}

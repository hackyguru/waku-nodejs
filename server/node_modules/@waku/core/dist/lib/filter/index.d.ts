import type { Peer } from "@libp2p/interface";
import { type ContentTopic, type CoreProtocolResult, type IBaseProtocolCore, type Libp2p, type PubsubTopic } from "@waku/interfaces";
import { WakuMessage } from "@waku/proto";
import { BaseProtocol } from "../base_protocol.js";
export declare const FilterCodecs: {
    SUBSCRIBE: string;
    PUSH: string;
};
export declare class FilterCore extends BaseProtocol implements IBaseProtocolCore {
    private handleIncomingMessage;
    readonly pubsubTopics: PubsubTopic[];
    constructor(handleIncomingMessage: (pubsubTopic: PubsubTopic, wakuMessage: WakuMessage, peerIdStr: string) => Promise<void>, pubsubTopics: PubsubTopic[], libp2p: Libp2p);
    subscribe(pubsubTopic: PubsubTopic, peer: Peer, contentTopics: ContentTopic[]): Promise<CoreProtocolResult>;
    unsubscribe(pubsubTopic: PubsubTopic, peer: Peer, contentTopics: ContentTopic[]): Promise<CoreProtocolResult>;
    unsubscribeAll(pubsubTopic: PubsubTopic, peer: Peer): Promise<CoreProtocolResult>;
    ping(peer: Peer): Promise<CoreProtocolResult>;
    private onRequest;
}

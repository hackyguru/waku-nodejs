import { HealthStatus, Protocols } from "@waku/interfaces";
class HealthManager {
    static instance;
    health;
    constructor() {
        this.health = {
            overallStatus: HealthStatus.Unhealthy,
            protocolStatuses: new Map()
        };
    }
    static getInstance() {
        if (!HealthManager.instance) {
            HealthManager.instance = new HealthManager();
        }
        return HealthManager.instance;
    }
    getHealthStatus() {
        return this.health.overallStatus;
    }
    getProtocolStatus(protocol) {
        return this.health.protocolStatuses.get(protocol);
    }
    updateProtocolHealth(multicodec, connectedPeers) {
        const protocol = this.getNameFromMulticodec(multicodec);
        let status = HealthStatus.Unhealthy;
        if (connectedPeers == 1) {
            status = HealthStatus.MinimallyHealthy;
        }
        else if (connectedPeers >= 2) {
            status = HealthStatus.SufficientlyHealthy;
        }
        this.health.protocolStatuses.set(protocol, {
            name: protocol,
            status: status,
            lastUpdate: new Date()
        });
        this.updateOverallHealth();
    }
    getNameFromMulticodec(multicodec) {
        let name;
        if (multicodec.includes("filter")) {
            name = Protocols.Filter;
        }
        else if (multicodec.includes("lightpush")) {
            name = Protocols.LightPush;
        }
        else if (multicodec.includes("store")) {
            name = Protocols.Store;
        }
        else {
            throw new Error(`Unknown protocol: ${multicodec}`);
        }
        return name;
    }
    updateOverallHealth() {
        const relevantProtocols = [Protocols.LightPush, Protocols.Filter];
        const statuses = relevantProtocols.map((p) => this.getProtocolStatus(p)?.status);
        if (statuses.some((status) => status === HealthStatus.Unhealthy)) {
            this.health.overallStatus = HealthStatus.Unhealthy;
        }
        else if (statuses.some((status) => status === HealthStatus.MinimallyHealthy)) {
            this.health.overallStatus = HealthStatus.MinimallyHealthy;
        }
        else {
            this.health.overallStatus = HealthStatus.SufficientlyHealthy;
        }
    }
}
export const getHealthManager = () => HealthManager.getInstance();
//# sourceMappingURL=health_manager.js.map
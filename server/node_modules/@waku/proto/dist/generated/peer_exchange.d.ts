import { type Codec, type DecodeOptions } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export interface PeerInfo {
    enr?: Uint8Array;
}
export declare namespace PeerInfo {
    const codec: () => Codec<PeerInfo>;
    const encode: (obj: Partial<PeerInfo>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerInfo>) => PeerInfo;
}
export interface PeerExchangeQuery {
    numPeers?: bigint;
}
export declare namespace PeerExchangeQuery {
    const codec: () => Codec<PeerExchangeQuery>;
    const encode: (obj: Partial<PeerExchangeQuery>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerExchangeQuery>) => PeerExchangeQuery;
}
export interface PeerExchangeResponse {
    peerInfos: PeerInfo[];
}
export declare namespace PeerExchangeResponse {
    const codec: () => Codec<PeerExchangeResponse>;
    const encode: (obj: Partial<PeerExchangeResponse>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerExchangeResponse>) => PeerExchangeResponse;
}
export interface PeerExchangeRPC {
    query?: PeerExchangeQuery;
    response?: PeerExchangeResponse;
}
export declare namespace PeerExchangeRPC {
    const codec: () => Codec<PeerExchangeRPC>;
    const encode: (obj: Partial<PeerExchangeRPC>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList, opts?: DecodeOptions<PeerExchangeRPC>) => PeerExchangeRPC;
}

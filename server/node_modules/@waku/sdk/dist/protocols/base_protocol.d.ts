import type { Peer, PeerId } from "@libp2p/interface";
import { ConnectionManager } from "@waku/core";
import { BaseProtocol } from "@waku/core/lib/base_protocol";
import { IBaseProtocolSDK, ProtocolUseOptions } from "@waku/interfaces";
interface Options {
    numPeersToUse?: number;
    maintainPeersInterval?: number;
}
export declare const DEFAULT_NUM_PEERS_TO_USE = 2;
export declare class BaseProtocolSDK implements IBaseProtocolSDK {
    protected core: BaseProtocol;
    protected connectionManager: ConnectionManager;
    private peerManager;
    readonly numPeersToUse: number;
    private maintainPeersIntervalId;
    private log;
    constructor(core: BaseProtocol, connectionManager: ConnectionManager, options: Options);
    get connectedPeers(): Peer[];
    /**
     * Disconnects from a peer and tries to find a new one to replace it.
     * @param peerToDisconnect The peer to disconnect from.
     * @returns The new peer that was found and connected to.
     */
    renewPeer(peerToDisconnect: PeerId): Promise<Peer | undefined>;
    /**
     * Stops the maintain peers interval.
     */
    stopMaintainPeersInterval(): void;
    /**
     * Checks if there are sufficient peers to send a message to.
     * If `forceUseAllPeers` is `false` (default), returns `true` if there are any connected peers.
     * If `forceUseAllPeers` is `true`, attempts to connect to `numPeersToUse` peers.
     * @param options Optional options object
     * @param options.forceUseAllPeers Optional flag to force connecting to `numPeersToUse` peers (default: false)
     * @param options.maxAttempts Optional maximum number of attempts to reach the required number of peers (default: 3)
     * @returns `true` if the required number of peers are connected, `false` otherwise
     */
    protected hasPeers(options?: Partial<ProtocolUseOptions>): Promise<boolean>;
    /**
     * Starts an interval to maintain the peers list to `numPeersToUse`.
     * @param interval The interval in milliseconds to maintain the peers.
     */
    private startMaintainPeersInterval;
    /**
     * Maintains the peers list to `numPeersToUse`.
     */
    private maintainPeers;
}
export {};

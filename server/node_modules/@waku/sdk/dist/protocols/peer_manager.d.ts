import { Peer, PeerId } from "@libp2p/interface";
import { ConnectionManager } from "@waku/core";
import { BaseProtocol } from "@waku/core/lib/base_protocol";
import { Logger } from "@waku/utils";
export declare class PeerManager {
    private readonly connectionManager;
    private readonly core;
    private readonly log;
    private peers;
    private healthManager;
    private readMutex;
    private writeMutex;
    private writeLockHolder;
    constructor(connectionManager: ConnectionManager, core: BaseProtocol, log: Logger);
    getWriteLockHolder(): string | null;
    getPeers(): Peer[];
    addPeer(peer: Peer): Promise<void>;
    removePeer(peerId: PeerId): Promise<void>;
    getPeerCount(): Promise<number>;
    hasPeers(): Promise<boolean>;
    removeExcessPeers(excessPeers: number): Promise<void>;
    /**
     * Finds and adds new peers to the peers list.
     * @param numPeers The number of peers to find and add.
     */
    findAndAddPeers(numPeers: number): Promise<Peer[]>;
    /**
     * Finds additional peers.
     * @param numPeers The number of peers to find.
     */
    findPeers(numPeers: number): Promise<Peer[]>;
    addMultiplePeers(peers: Peer[]): Promise<Peer[]>;
}

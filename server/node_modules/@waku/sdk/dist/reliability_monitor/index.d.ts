import type { Peer, PeerId } from "@libp2p/interface";
import { ContentTopic, CoreProtocolResult, Libp2p, PubsubTopic } from "@waku/interfaces";
import { ReceiverReliabilityMonitor } from "./receiver.js";
export declare class ReliabilityMonitorManager {
    private static receiverMonitors;
    static createReceiverMonitor(pubsubTopic: PubsubTopic, getPeers: () => Peer[], renewPeer: (peerId: PeerId) => Promise<Peer | undefined>, getContentTopics: () => ContentTopic[], protocolSubscribe: (pubsubTopic: PubsubTopic, peer: Peer, contentTopics: ContentTopic[]) => Promise<CoreProtocolResult>, addLibp2pEventListener: Libp2p["addEventListener"], sendLightPushMessage: (peer: Peer) => Promise<void>): ReceiverReliabilityMonitor;
    private constructor();
    static stop(pubsubTopic: PubsubTopic): void;
    static stopAll(): void;
}

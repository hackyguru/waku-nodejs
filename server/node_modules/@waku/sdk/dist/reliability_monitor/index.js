import { ReceiverReliabilityMonitor } from "./receiver.js";
export class ReliabilityMonitorManager {
    static receiverMonitors = new Map();
    static createReceiverMonitor(pubsubTopic, getPeers, renewPeer, getContentTopics, protocolSubscribe, addLibp2pEventListener, sendLightPushMessage) {
        if (ReliabilityMonitorManager.receiverMonitors.has(pubsubTopic)) {
            return ReliabilityMonitorManager.receiverMonitors.get(pubsubTopic);
        }
        const monitor = new ReceiverReliabilityMonitor(pubsubTopic, getPeers, renewPeer, getContentTopics, protocolSubscribe, addLibp2pEventListener, sendLightPushMessage);
        ReliabilityMonitorManager.receiverMonitors.set(pubsubTopic, monitor);
        return monitor;
    }
    constructor() { }
    static stop(pubsubTopic) {
        this.receiverMonitors.delete(pubsubTopic);
    }
    static stopAll() {
        for (const [pubsubTopic, monitor] of this.receiverMonitors) {
            monitor.setMaxPingFailures(undefined);
            this.receiverMonitors.delete(pubsubTopic);
        }
    }
}
//# sourceMappingURL=index.js.map
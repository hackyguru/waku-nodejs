import type { Peer, PeerId } from "@libp2p/interface";
import { ContentTopic, CoreProtocolResult, IProtoMessage, Libp2p, PubsubTopic } from "@waku/interfaces";
export declare class ReceiverReliabilityMonitor {
    private readonly pubsubTopic;
    private getPeers;
    private renewPeer;
    private getContentTopics;
    private protocolSubscribe;
    private addLibp2pEventListener;
    private sendLightPushMessage;
    private receivedMessagesFormPeer;
    private receivedMessages;
    private scheduledVerification;
    private verifiedPeers;
    private peerFailures;
    private maxPingFailures;
    private peerRenewalLocks;
    constructor(pubsubTopic: PubsubTopic, getPeers: () => Peer[], renewPeer: (peerId: PeerId) => Promise<Peer | undefined>, getContentTopics: () => ContentTopic[], protocolSubscribe: (pubsubTopic: PubsubTopic, peer: Peer, contentTopics: ContentTopic[]) => Promise<CoreProtocolResult>, addLibp2pEventListener: Libp2p["addEventListener"], sendLightPushMessage: (peer: Peer) => Promise<void>);
    setMaxPingFailures(value: number | undefined): void;
    handlePingResult(peerId: PeerId, result?: CoreProtocolResult): Promise<void>;
    notifyMessageReceived(peerIdStr: string, message: IProtoMessage): boolean;
    notifyMessageSent(peerId: PeerId, message: IProtoMessage): void;
    shouldVerifyPeer(peerId: PeerId): boolean;
    private buildMessageHash;
    private renewAndSubscribePeer;
}

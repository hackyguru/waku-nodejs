import type { Stream } from "@libp2p/interface";
import { PeerId } from "@libp2p/interface";
import { MultiaddrInput } from "@multiformats/multiaddr";
import { ConnectionManager } from "@waku/core";
import type { IFilter, IHealthManager, ILightPush, IRelay, IStore, IWaku, Libp2p, ProtocolCreateOptions, PubsubTopic } from "@waku/interfaces";
import { Protocols } from "@waku/interfaces";
export declare const DefaultPingKeepAliveValueSecs: number;
export declare const DefaultRelayKeepAliveValueSecs: number;
export declare const DefaultUserAgent = "js-waku";
export declare const DefaultPingMaxInboundStreams = 10;
export interface WakuOptions {
    /**
     * Set keep alive frequency in seconds: Waku will send a `/ipfs/ping/1.0.0`
     * request to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link @waku/core.DefaultPingKeepAliveValueSecs}
     */
    pingKeepAlive?: number;
    /**
     * Set keep alive frequency in seconds: Waku will send a ping message over
     * relay to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link @waku/core.DefaultRelayKeepAliveValueSecs}
     */
    relayKeepAlive?: number;
    /**
     * Set the user agent string to be used in identification of the node.
     * @default {@link @waku/core.DefaultUserAgent}
     */
    userAgent?: string;
}
export type CreateWakuNodeOptions = ProtocolCreateOptions & Partial<WakuOptions>;
type ProtocolsEnabled = {
    filter?: boolean;
    lightpush?: boolean;
    store?: boolean;
};
export declare class WakuNode implements IWaku {
    readonly pubsubTopics: PubsubTopic[];
    libp2p: Libp2p;
    relay?: IRelay;
    store?: IStore;
    filter?: IFilter;
    lightPush?: ILightPush;
    connectionManager: ConnectionManager;
    readonly health: IHealthManager;
    constructor(pubsubTopics: PubsubTopic[], options: CreateWakuNodeOptions, libp2p: Libp2p, protocolsEnabled: ProtocolsEnabled, relay?: IRelay);
    get peerId(): PeerId;
    get protocols(): string[];
    dial(peer: PeerId | MultiaddrInput, protocols?: Protocols[]): Promise<Stream>;
    start(): Promise<void>;
    stop(): Promise<void>;
    waitForPeers(protocols?: Protocols[], timeoutMs?: number): Promise<void>;
    isStarted(): boolean;
    isConnected(): boolean;
    private mapToPeerIdOrMultiaddr;
}
export {};

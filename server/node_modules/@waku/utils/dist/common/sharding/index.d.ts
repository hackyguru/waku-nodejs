import { NetworkConfig, PubsubTopic, ShardInfo, SingleShardInfo } from "@waku/interfaces";
export * from "./type_guards.js";
export declare function derivePubsubTopicsFromNetworkConfig(networkConfig: NetworkConfig): PubsubTopic[];
export declare const singleShardInfoToPubsubTopic: (shardInfo: SingleShardInfo) => PubsubTopic;
export declare const singleShardInfosToShardInfo: (singleShardInfos: SingleShardInfo[]) => ShardInfo;
export declare const shardInfoToPubsubTopics: (shardInfo: Partial<NetworkConfig>) => PubsubTopic[];
export declare const pubsubTopicToSingleShardInfo: (pubsubTopics: PubsubTopic) => SingleShardInfo;
export declare const pubsubTopicsToShardInfo: (pubsubTopics: PubsubTopic[]) => ShardInfo;
export declare function ensurePubsubTopicIsConfigured(pubsubTopic: PubsubTopic, configuredTopics: PubsubTopic[]): void;
interface ContentTopic {
    generation: number;
    application: string;
    version: string;
    topicName: string;
    encoding: string;
}
/**
 * Given a string, will throw an error if it is not formatted as a valid content topic for autosharding based on https://rfc.vac.dev/spec/51/
 * @param contentTopic String to validate
 * @returns Object with each content topic field as an attribute
 */
export declare function ensureValidContentTopic(contentTopic: string): ContentTopic;
/**
 * Given a string, determines which autoshard index to use for its pubsub topic.
 * Based on the algorithm described in the RFC: https://rfc.vac.dev/spec/51//#algorithm
 */
export declare function contentTopicToShardIndex(contentTopic: string, networkShards?: number): number;
export declare function contentTopicToPubsubTopic(contentTopic: string, clusterId?: number, networkShards?: number): string;
/**
 * Given an array of content topics, groups them together by their Pubsub topic as derived using the algorithm for autosharding.
 * If any of the content topics are not properly formatted, the function will throw an error.
 */
export declare function contentTopicsByPubsubTopic(contentTopics: string[], clusterId?: number, networkShards?: number): Map<string, Array<string>>;
/**
 * Used when creating encoders/decoders to determine which pubsub topic to use
 */
export declare function determinePubsubTopic(contentTopic: string, pubsubTopicShardInfo?: SingleShardInfo | PubsubTopic): string;
/**
 * Validates sharding configuration and sets defaults where possible.
 * @returns Validated sharding parameters, with any missing values set to defaults
 */
export declare const ensureShardingConfigured: (networkConfig: NetworkConfig) => {
    shardInfo: ShardInfo;
    pubsubTopics: PubsubTopic[];
};
